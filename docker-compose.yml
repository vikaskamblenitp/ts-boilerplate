version: "3.7"

services:
  # app:
  #   image: node:18-alpine
  #   command: sh -c "npm run dev"
  #   container_name: api
  #   ports:
  #     - 3000:3000
  #   working_dir: /app
  #   volumes:
  #     - ./:/app

  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgresql
    command: ["postgres", "-c", "log_statement=all"]
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: integrations
    volumes:
      - ./.data/docker/postgresql:/var/lib/postgresql
    ports:
      - "5434:5432"
    networks:
      - server_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 30s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    restart: always
    container_name: kafka
    ports:
      - 9091:9091
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19091,PLAINTEXT_HOST://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./.data/docker/kafka/data:/var/lib/kafka/data
    networks:
      - server_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
    ports:
      - 2181:2181
    volumes:
      - ./.data/docker/zookeeper/data:/var/lib/zookeeper/data
      - ./.data/docker/zookeeper/datalog:/var/lib/zookeeper/datalog
    networks:
      - server_network

  kowl:
    image: quay.io/cloudhut/kowl:master
    container_name: kowl
    restart: "no"
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_BROKERS: kafka:19091
      KAFKA_TLS_ENABLED: "false"
    networks:
      - server_network

  # redis:
  #   image: redis/redis-stack:latest
  #   restart: always
  #   container_name: redis-stack
  #   ports:
  #     - 6379:6379
  #   volumes:
  #     - ./.data/docker/redis:/var/lib/redis
  #   networks:
  #     - server_network

networks:
  server_network:
    driver: bridge
